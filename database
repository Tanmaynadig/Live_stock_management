import mysql.connector

conn=mysql.connector.connect(host='localhost',user='root',password='Jalagara@6106',database='live_stock_management')
my_cursor=conn.cursor()
conn.commit()
conn.close()

# app.py
# app.py
from flask import Flask, request, jsonify
from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean
from sqlalchemy.orm import declarative_base, sessionmaker

app = Flask(__name__)

DATABASE_URI = 'mysql+mysqlconnector://root:Jalagara@6106@localhost/livestock_management'
engine = create_engine(DATABASE_URI)
Base = declarative_base()
Session = sessionmaker(bind=engine)
session = Session()

class Livestock(Base):
    __tablename__ = 'livestock'
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    breed = Column(String(100), nullable=False)
    weight = Column(Float, nullable=False)
    age = Column(Integer, nullable=False)
    healthy = Column(Boolean, default=True)

Base.metadata.create_all(engine)

@app.route('/add_livestock', methods=['POST'])
def add_livestock():
    try:
        data = request.json
        new_livestock = Livestock(
            name=data['name'],
            breed=data['breed'],
            weight=data['weight'],
            age=data['age'],
            healthy=data['healthy']
        )
        session.add(new_livestock)
        session.commit()
        return jsonify({'message': 'Livestock added successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/list_livestock', methods=['GET'])
def list_livestock():
    try:
        livestock = session.query(Livestock).all()
        livestock_list = [
            {
                'id': animal.id,
                'name': animal.name,
                'breed': animal.breed,
                'weight': animal.weight,
                'age': animal.age,
                'healthy': animal.healthy
            }
            for animal in livestock
        ]
        return jsonify(livestock_list)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/delete_livestock/<int:id>', methods=['DELETE'])
def delete_livestock(id):
    try:
        livestock = session.query(Livestock).filter(Livestock.id == id).one()
        session.delete(livestock)
        session.commit()
        return jsonify({'message': 'Livestock deleted successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
